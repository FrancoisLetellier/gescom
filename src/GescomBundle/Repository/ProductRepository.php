<?php

namespace GescomBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\NativeQuery;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * getListByPage queryBuilder
     *
     * @param int $page
     * @param int $maxByPage
     * @return Paginator
     */
    public function getListByPage($page = 1, $maxByPage = 0)
    {
        $builder = $this->createQueryBuilder('p')
            ->setFirstResult(($page-1) * $maxByPage)
            ->setMaxResults($maxByPage);
        return new Paginator($builder);
    }

    /**
     * getRandomProducts Caller
     *
     * @param int $amount
     * @param $cat
     * @return array
     */
    public function getRandomProductsByCategory($amount = 6, $cat)
    {
        return $this->getRandomProductsByCategoryNativeQuery($amount, $cat)->getResult();
    }

    /**
     * getRandomProductsNativeQuery Function
     *
     * @param int $amount
     * @param $cat
     * @return NativeQuery
     */
    public function getRandomProductsByCategoryNativeQuery($amount = 6, $cat)
    {
        # set entity name
        $table = $this->getClassMetadata()
            ->getTableName();

        # create rsm object
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult($this->getEntityName(), 'p');
        $rsm->addFieldResult('p', 'id', 'id');
        $rsm->addFieldResult('p', 'name', 'name');
        $rsm->addFieldResult('p', 'description', 'description');
        $rsm->addJoinedEntityResult('GescomBundle\Entity\Category', 'c', 'p', 'category');
        $rsm->addFieldResult('c', 'category_id', 'id');
        $rsm->addFieldResult('c', 'category_name', 'name');
        $rsm->addJoinedEntityResult('GescomBundle\Entity\Brand', 'b', 'p', 'brand');
        $rsm->addFieldResult('b', 'brand_id', 'id');
        $rsm->addFieldResult('b', 'brand_name', 'name');

        # make query
        /** @noinspection SqlResolve */
        return $this->getEntityManager()->createNativeQuery("
            SELECT p.id, p.name, p.description, c.id AS category_id, c.name AS category_name, b.id AS brand_id, b.name AS brand_name
            FROM {$table} p 
            INNER JOIN category c ON p.category_id = c.id
            INNER JOIN brand b ON p.brand_id = b.id
            WHERE c.name = {$cat}
            ORDER BY RAND() 
            LIMIT 0, {$amount}
        ", $rsm);
    }

}
